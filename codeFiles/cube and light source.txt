#include "Include/Main.h"

static float deltaTime = 0;
static float mixAmount = 0;
static float camX = 0.0f;
static float camY = 0.0f;
static float camZ = 5.0f;
static float speed = 3.0f;

static float pitch = 0;
static float yaw = -90.0f;

static float windowWidth, windowHeight;

float lastPosX, lastPosY;

Camera myCamera = Camera::Camera(glm::vec3(0.0f, 0.0f, 5.0f), glm::vec3(0.0f, 1.0f, 0.0f), -90.0f, 0.0f);

bool firstMouse = true;

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
	windowWidth = width;
	windowHeight = height;
	return;
}

void ProcessInput(GLFWwindow* window) {

	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);



	float forwardComponent = 0.0f;
	float rightComponent = 0.0f;
	float upComponent = 0.0f;

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) {

		forwardComponent += 1;

		/*
		camX += speed * direction.x * deltaTime;
		camZ += speed * direction.z * deltaTime;
		*/
	}

	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {

		forwardComponent -= 1;

		/*
		camX -= speed * direction.x * deltaTime;
		camZ -= speed * direction.z * deltaTime;
		*/
	}

	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) {

		rightComponent += 1.0f;

		/*
		camX += speed * rotatedDirection.x * deltaTime;
		camZ += speed * rotatedDirection.z * deltaTime;
		*/
	}
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) {

		rightComponent -= 1.0f;

		/*
		camX -= speed * rotatedDirection.z * deltaTime;
		camZ -= speed * rotatedDirection.x * deltaTime;
		*/
	}


	if (glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS) {

		upComponent += 1.0f;
	}
	if (glfwGetKey(window, GLFW_KEY_LEFT_CONTROL) == GLFW_PRESS) {

		upComponent -= 1.0f;
	}

	myCamera.ProcessKeyboardMovement(forwardComponent, rightComponent, upComponent, deltaTime);

	if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS) {
		mixAmount += deltaTime;
		mixAmount = fmin(mixAmount, 1.0f);
	}

	if (glfwGetKey(window, GLFW_KEY_F) == GLFW_PRESS) {
		mixAmount -= deltaTime;
		mixAmount = fmax(mixAmount, 0.0f);
	}


	return;
}

void mouseCallback(GLFWwindow* window, double xPos, double yPos) {

	if (firstMouse) {
		lastPosX = xPos;
		lastPosY = yPos;
		firstMouse = false;
	}

	float xoffset = xPos - lastPosX;
	float yoffset = lastPosY - yPos;
	
	float sensitivity = 0.1f;
	
	myCamera.ProcessMouseMovement(xoffset, yoffset, deltaTime, true);

	lastPosX = xPos;
	lastPosY = yPos;

	//glfwSetCursorPos(window, 400, 300);

	return;
}

int main() {
	
	// In the main function we first initialize GLFW with glfwInit, after which we can configure GLFW using glfwWindowHint.
	// the configurations are pretty self-explainatory

	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ANY_PROFILE);
	//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

	// create and instance of a GLFWWindow, and intialise it with the correct dimensions
	GLFWwindow* window = glfwCreateWindow(800, 600, "box2dDemo", NULL, NULL);
	
	// check that the window creation is successful
	if (window == NULL) {
		std::cout << "failed to create window" << std::endl;
		glfwTerminate();
		return -1;
	}

	// switch the context to the window
	glfwMakeContextCurrent(window);

	// initialise glad, which manages function pointers for OpenGL so we want to initialize GLAD before we call any OpenGL function: 
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// mouse input initialisation - tell glfw to capture the cursor so we can move it around
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
	// now the cursor won't be visible and it won't read the window

	/*
	lastPosX = windowWidth / 2.0f;
	lastPosY = windowHeight / 2.0f;
	*/
	lastPosX = 400;
	lastPosY = 300;

	// now the callback is set so that the callback runs whenever the cursor is moved
	glfwSetCursorPosCallback(window, mouseCallback);


	// GLFW gives us glfwGetProcAddress that defines the correct function based on which OS we're compiling for.
	
	/*
	// get the maximum number of vertex attributes we can use. 16 is plenty
	int nrAttributes;
	glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);
	std::cout << "Maximum nr of vertex attributes supported: " << nrAttributes << std::endl;
	*/

	








	Shader lightingShader("Shaders/lightingShader.vs", "Shaders/lightingShader.fs");
	Shader lightCubeShader("Shaders/lightCubeShader.vs", "Shaders/lightCubeShader.fs");

	// tell opengl the size of the rendering window
	//glViewport(0, 0, 800, 600);

	// Behind the scenes OpenGL uses the data specified via glViewport to transform the 2D coordinates it processed to coordinates on your screen.
	// For example, a processed point of location (-0.5,0.5) would (as its final transformation) be mapped to (200,450) in screen coordinates.

	// However, the moment a user resizes the window the viewport should be adjusted as well.
	// We can register a callback function on the window that gets called each time the window is resized.
	// the callback function is defined further up in the file

	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	// There are many callbacks functions we can set to register our own functions.
	// For example, we can make a callback function to process joystick input changes,
	// process error messages etc.We register the callback functions after we've created
	// the window and before the render loop is initiated.

	
	
	float cubeVertices[] = {
	-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,

	-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f,  0.0f, 1.0f,

	-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,
	-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,

	 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,

	-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,

	-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f
	};
	


	/*
	float furnaceVertices[] = {
		 0.5f,  0.5f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 2.0f, 2.0f,         // top right texture

		 0.5f, -0.5f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 2.0f, 0.0f,

		-0.5f, -0.5f, 0.0f,
		0.0f, 0.0f, 1.0f,
		0.0f, 0.0f,

		-0.5f,  0.5f, 0.0f,   // top left
		 0.0f,  1.0f, 0.0f,
		 0.0f,  2.0f

	};
	*/
	
	
	/*
	float furnaceVertices[] = {
		// positions          // colors           // texture coords
		 0.5f,  0.5f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 1.0f,   // top right
		 0.5f, -0.5f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 1.0f, 0.0f,   // bottom right
		-0.5f, -0.5f, 0.0f,
		0.0f, 0.0f, 1.0f,
		0.0f, 0.0f,   // bottom left
		-0.5f,  0.5f, 0.0f,
		1.0f, 1.0f, 0.0f,
		0.0f, 1.0f    // top left 
	};
	*/
	
	// specify the indexes of the vertexes that form each triangle

	// create Element Array Buffer - stores indices that opengl uses to decide what to draw
	// With the vertex data defined we'd like to send it as input to the first process of the graphics pipeline: the vertex shader.
	// however, every time we need to draw an object we'll have to repeat this process.
	// these functions are not scalable, so we need a way to store all the state configurations and simply bind this object to restore the state

	// to create a vertex array object the process is similar to the start of the other object

	// initialisation code (done once unless your object frequently changes)
	// create vertex buffer object ID (an array can hold multiple buffers)
	unsigned int VBO, lightVAO;

	// generate a vertex array and link it to VAO
	glGenVertexArrays(1, &lightVAO);

	// generate 1 buffer with the single unsigned int
	glGenBuffers(1, &VBO);

	// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
	glBindVertexArray(lightVAO);

	// bind the type of the vertex buffer (an array buffer)
	glBindBuffer(GL_ARRAY_BUFFER, VBO);

	// so now any buffer calls we make on the glarraybuffer target wil be used to configure the currently bound buffer, which is vbo
	//Then we can make a call to the glBufferData function that copies the previously defined vertex data into the buffer's memory

	// glBufferData is a function specifically targeted to copy user - defined data into the currently bound buffer
	// Its first argument is the type of the buffer we want to copy data into: the vertex buffer object currently bound to the GL_ARRAY_BUFFER target.
	// second argument is the size of the data to pass through
	// the third is the data we want to send
	// the fourth determines the way the gpu should handle the data:

	/// <summary>
	/// GL_STREAM_DRAW: the data is set only onceand used by the GPU at most a few times.
	/// GL_STATIC_DRAW : the data is set only onceand used many times.
	/// GL_DYNAMIC_DRAW : the data is changed a lot and used many times.
	/// </summary>
	/// <returns></returns>

	glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVertices), cubeVertices, GL_STATIC_DRAW);

	// now, the gpu knows how to process the data but opengl doesn't know how to interpret the vertex data in memory (we know it as three vec3 coordinates)
	// let's configure opengl to correctly interpret the vertex data

	// how the vertices data is formatted:
	
	// vertex 1 // vertex 2 // vertex 3 //
	// stride 12 bits (4 bytes per component, 3 components)
	// offset 0 (there's no extra data that is shoved in at the start that needs to be skipped)

	// the function for configurating the way vertex data is interpreted is glVertexAttribPointer
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
	// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
	glBindVertexArray(0);

	// and the drawing code in the render loop


	// allows opengl to compare the z coordinate of fragments and then replaces them as required
	glEnable(GL_DEPTH_TEST);

	glm::mat4 perspective;
	perspective = glm::perspective(glm::radians(90.0f), 800.0f / 600.0f, 0.1f, 100.0f);



	// lighting definitions
	glm::vec3 objectColour = glm::vec3(1.0f, 0.5f, 0.31f);
	glm::vec3 lightColour = glm::vec3(1.0f);

	glm::vec3 lightCubePosition = glm::vec3(1.5f, 0.6f, 1.0f);


	///////////////////////////////
	//      the render loop      //
	///////////////////////////////

	// draw in polygon/wireframe mode
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);

	float lastTime = 0;

	// glfwWindowShouldClose polls if glfw has been instructed to close
	while (!glfwWindowShouldClose(window)) {

		float newTime = glfwGetTime();
		deltaTime = newTime - lastTime;
		lastTime = newTime;

		glfwSetWindowTitle(window, ((std::string)"FPS: " + std::to_string(1.0f / deltaTime)).c_str());

		// call to ProcessInput, exits on esc key press
		ProcessInput(window);



		// rotate the camera to the right
		/*
		yaw += deltaTime * 30.0f;
		if (yaw > 180) yaw -= 360;
		*/

		//////////////////////
		// camera movements //
		//////////////////////

		// yaw = 0 -> looking parallel to x vector (perp to y)
		// pitch = 0 -> looking perpendicular to y unit vector


		// rendering commands here
		// 
		// At the start of frame we want to clear the screen.
		// We can clear the screen's color buffer using glClear where we pass in buffer bits to specify which buffer we would like to clear.
		// The possible bits we can set are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT

		// the glClearColor function is a state-setting function and glClear is a state-using function in that it uses the current state to retrieve the clearing color from. 
		glClearColor(0.0f, 0.0f, 0.0f, 1.0);
		glClear(GL_COLOR_BUFFER_BIT);


		///////////////////////////////
		//      3d  projections      //
		///////////////////////////////

		/*
		to transform the local coordinates of an object you're going to need to use different sorts of matrices in order to transform between different coordinate spaces
		local space - the coordinate space used by the model that the object coordinates use - (0,0,0) is usually the origin
		this is transformed by the model matrix, which produces the coordinates in world space
		then, we transform the coordinates in the world space by the view matrix, which puts it in view space
		then you do a projection matrix which procuces it in clip space
		then opengl does some stuff to it like making sure that it's outside the clipping area and then it's put on the screen

		*/


		/*
		model = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));
		model = glm::translate(model, glm::vec3(5.0f - glfwGetTime(), 0.0f, 0.0f));
		model = glm::rotate(model, (float)glfwGetTime(), glm::vec3(0.0f, 1.0f, 0.0f));
		*/
		
		

		glm::mat4 model = glm::mat4(1.0f);
		
		//model = glm::scale(model, glm::vec3(2.0f, 1.0f, 2.0f));

		

		// create the view matrix
		glm::mat4 view;
		view = myCamera.GetViewMatrix();

		// when the model matrix is scaled, the normal will be scaled too, but the scaled normal will not be perpendicular to the face.
		// therefore, do the inverse transposition of the normal to find the true normal for the scaled matrix
		// we do this on the cpu because transpositions are costly for the gpu every time the shaders are run
		// also in view space so need to transform by view matrix too
		glm::mat3 normalMatrix = glm::mat3(glm::transpose(glm::inverse(view * model)));

		// rotate the light cube around the big cube
		lightCubePosition.x = 1.5 * cos(glfwGetTime() / 6.0f);
		//lightCubePosition.y = 1.5 * cos(glfwGetTime() / 2.0f);
		lightCubePosition.y = 0.0f;
		lightCubePosition.z = 1.5 * sin(glfwGetTime() / 6.0f);

		/*
		glBindVertexArray(VAO);
		// insert call to function that draws the triangle here!
		//glDrawArrays(GL_TRIANGLES, 0, 6);
		// second argument is the number of items in the elements list (3 vertices * 2 trangles)
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		//glDrawArrays(GL_TRIANGLES, 0, 3);
		*/

		/*
		glUseProgram(shaderProgram2);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		*/

		//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

		/*
		shader2.UseShader();

		glBindVertexArray(VAO2);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		*/


		// now bind the texture to assign the texture to the fragment shader sampler automatically
		//glBindTexture(GL_TEXTURE_2D, furnace1Texture);

		lightingShader.UseShader();

		// set values for the material struct in the fragment shader
		lightingShader.SetFloatVec3Uniform("material.ambient", 1.0f, 0.5f, 0.32f);
		lightingShader.SetFloatVec3Uniform("material.diffuse", 1.0f, 0.5f, 0.32f);
		lightingShader.SetFloatVec3Uniform("material.specular", 0.5f, 0.5f, 0.5f);

		lightingShader.SetFloatVec3Uniform("light.ambient", 0.1f, 0.1f, 0.1f);
		lightingShader.SetFloatVec3Uniform("light.diffuse", 0.5f, 0.5f, 0.5f); // darken diffuse light a bit
		lightingShader.SetFloatVec3Uniform("light.specular", 1.0f, 1.0f, 1.0f);
		lightingShader.SetFloatVec3Uniform("light.position", view * glm::vec4(lightCubePosition, 1.0f));

		lightingShader.SetFloatUniform("material.shininess", 32);

		lightingShader.SetFloatMat3Uniform("normalMatrix", normalMatrix);

		// don't need to pass in view position since in view space view position is always origin
		//lightingShader.SetFloatVec3Uniform("viewPosition", myCamera.Position);

		lightingShader.SetFloatVec3Uniform("objectColour", objectColour);
		lightingShader.SetFloatVec3Uniform("lightColour", lightColour);

		lightingShader.SetFloatMat4Uniform("model", model);
		lightingShader.SetFloatMat4Uniform("view", view);
		lightingShader.SetFloatMat4Uniform("perspective", perspective);

		/*
		// create a matrix which rotates vertices by 90 degrees and scales downward

		glm::mat4 rotationTransformation = glm::mat4(1.0f);
		rotationTransformation = glm::translate(rotationTransformation, glm::vec3(0.25, 0.25, 0.0f));
		rotationTransformation = glm::rotate(rotationTransformation, (float)rotation, glm::vec3(0.0, 0.0, 1.0));
		*/

		glBindVertexArray(lightVAO);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		model = glm::translate(model, lightCubePosition);
		model = glm::scale(model, glm::vec3(0.2f));

		lightCubeShader.UseShader();

		lightCubeShader.SetFloatMat4Uniform("model", model);
		lightCubeShader.SetFloatMat4Uniform("view", view);
		lightCubeShader.SetFloatMat4Uniform("perspective", perspective);

		glBindVertexArray(lightVAO);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		/*

		lightCubeShader.UseShader();

		model = glm::translate(model, lightCubePosition);
		model = glm::scale(model, glm::vec3(0.2f));

		lightCubeShader.SetFloatMat4Uniform("model", model);
		lightCubeShader.SetFloatMat4Uniform("view", view);
		lightCubeShader.SetFloatMat4Uniform("perspective", perspective);

		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		*/


		// checks if events are triggered like input or resizes, updates the window state,
		// and calls the corresponding functions which we can register as callbacks
		glfwPollEvents();

		// swaps the colour buffer that is displayed to the screen (replaces the previously displayed front buffer with the previously written to back buffer)
		glfwSwapBuffers(window);


		// clears the depth buffer for the next loop
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	}

	// optional: de-allocate all resources once they've outlived their purpose:
	// ------------------------------------------------------------------------
	glDeleteVertexArrays(1, &lightVAO);
	glDeleteBuffers(1, &VBO);

	lightingShader.DeleteShaderProgram();
	lightCubeShader.DeleteShaderProgram();

	// As soon as we exit the render loop we would like to properly clean / delete all of GLFW's resources that were allocated.
	glfwTerminate();

	return 0;
}