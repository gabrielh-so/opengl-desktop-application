#include "Main.h"

static float mixAmount = 0;
static float deltaTime = 0;
static float rotation = 0;

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
	return;
}

void ProcessInput(GLFWwindow* window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) {
		mixAmount += 1.0f * deltaTime;
		mixAmount = fmin(mixAmount, 1.0f);
	}

	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {
		mixAmount -= 1.0f * deltaTime;
		mixAmount = fmax(mixAmount, 0.0f);
	}

	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) {
		rotation += 1.0f * deltaTime;
		rotation = fmin(rotation, 3.141f);
	}
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) {
		rotation -= 1.0f * deltaTime;
		rotation = fmax(rotation, -3.141f);
	}


	return;
}

int main() {
	
	// In the main function we first initialize GLFW with glfwInit, after which we can configure GLFW using glfwWindowHint.
	// the configurations are pretty self-explainatory

	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ANY_PROFILE);
	//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

	// create and instance of a GLFWWindow, and intialise it with the correct dimensions
	GLFWwindow* window = glfwCreateWindow(800, 600, "box2dDemo", NULL, NULL);
	
	// check that the window creation is successful
	if (window == NULL) {
		std::cout << "failed to create window" << std::endl;
		glfwTerminate();
		return -1;
	}

	// switch the context to the window
	glfwMakeContextCurrent(window);

	// initialise glad, which manages function pointers for OpenGL so we want to initialize GLAD before we call any OpenGL function: 
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	// GLFW gives us glfwGetProcAddress that defines the correct function based on which OS we're compiling for.
	
	// get the maximum number of vertex attributes we can use. 16 is plenty
	int nrAttributes;
	glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);
	std::cout << "Maximum nr of vertex attributes supported: " << nrAttributes << std::endl;


	Shader furnaceTextureShader("Shaders/furnaceTextureShader.vs", "Shaders/furnaceTextureShader.fs");

	// tell opengl the size of the rendering window
	//glViewport(0, 0, 800, 600);

	// Behind the scenes OpenGL uses the data specified via glViewport to transform the 2D coordinates it processed to coordinates on your screen.
	// For example, a processed point of location (-0.5,0.5) would (as its final transformation) be mapped to (200,450) in screen coordinates.

	// However, the moment a user resizes the window the viewport should be adjusted as well.
	// We can register a callback function on the window that gets called each time the window is resized.
	// the callback function is defined further up in the file

	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	// There are many callbacks functions we can set to register our own functions.
	// For example, we can make a callback function to process joystick input changes,
	// process error messages etc.We register the callback functions after we've created
	// the window and before the render loop is initiated.

	
	
	float furnaceVertices[] = {
		 0.5f,  0.5f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 1.0f,         // top right texture

		 0.5f, -0.5f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 1.0f, 0.0f,

		-0.5f, -0.5f, 0.0f,
		0.0f, 0.0f, 1.0f,
		0.0f, 0.0f,

		-0.5f,  0.5f, 0.0f,   // top left
		 0.0f,  1.0f, 0.0f,
		 0.0f,  1.0f

	};
	


	/*
	float furnaceVertices[] = {
		 0.5f,  0.5f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 2.0f, 2.0f,         // top right texture

		 0.5f, -0.5f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 2.0f, 0.0f,

		-0.5f, -0.5f, 0.0f,
		0.0f, 0.0f, 1.0f,
		0.0f, 0.0f,

		-0.5f,  0.5f, 0.0f,   // top left
		 0.0f,  1.0f, 0.0f,
		 0.0f,  2.0f

	};
	*/
	
	
	/*
	float furnaceVertices[] = {
		// positions          // colors           // texture coords
		 0.5f,  0.5f, 0.0f,
		 1.0f, 0.0f, 0.0f,
		 1.0f, 1.0f,   // top right
		 0.5f, -0.5f, 0.0f,
		 0.0f, 1.0f, 0.0f,
		 1.0f, 0.0f,   // bottom right
		-0.5f, -0.5f, 0.0f,
		0.0f, 0.0f, 1.0f,
		0.0f, 0.0f,   // bottom left
		-0.5f,  0.5f, 0.0f,
		1.0f, 1.0f, 0.0f,
		0.0f, 1.0f    // top left 
	};
	*/
	
	// specify the indexes of the vertexes that form each triangle
	unsigned int furnaceIndices[] = {
		0, 1, 3,
		1, 2, 3
	};

	// create Element Array Buffer - stores indices that opengl uses to decide what to draw
	// With the vertex data defined we'd like to send it as input to the first process of the graphics pipeline: the vertex shader.
	// however, every time we need to draw an object we'll have to repeat this process.
	// these functions are not scalable, so we need a way to store all the state configurations and simply bind this object to restore the state

	// to create a vertex array object the process is similar to the start of the other object

	// initialisation code (done once unless your object frequently changes)
	// create vertex buffer object ID (an array can hold multiple buffers)
	unsigned int VBO, VAO, EBO;

	// generate a vertex array and link it to VAO
	glGenVertexArrays(1, &VAO);

	// generate 1 buffer with the single unsigned int
	glGenBuffers(1, &VBO);
	glGenBuffers(1, &EBO);

	// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
	glBindVertexArray(VAO);

	// bind the type of the vertex buffer (an array buffer)
	glBindBuffer(GL_ARRAY_BUFFER, VBO);

	// so now any buffer calls we make on the glarraybuffer target wil be used to configure the currently bound buffer, which is vbo
	//Then we can make a call to the glBufferData function that copies the previously defined vertex data into the buffer's memory

	// glBufferData is a function specifically targeted to copy user - defined data into the currently bound buffer
	// Its first argument is the type of the buffer we want to copy data into: the vertex buffer object currently bound to the GL_ARRAY_BUFFER target.
	// second argument is the size of the data to pass through
	// the third is the data we want to send
	// the fourth determines the way the gpu should handle the data:

	/// <summary>
	/// GL_STREAM_DRAW: the data is set only onceand used by the GPU at most a few times.
	/// GL_STATIC_DRAW : the data is set only onceand used many times.
	/// GL_DYNAMIC_DRAW : the data is changed a lot and used many times.
	/// </summary>
	/// <returns></returns>

	glBufferData(GL_ARRAY_BUFFER, sizeof(furnaceVertices), furnaceVertices, GL_STATIC_DRAW);

	// Also, just like the VBO we want to place those calls between a bind and an unbind call, although this time we specify GL_ELEMENT_ARRAY_BUFFER as the buffer type.
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(furnaceIndices), furnaceIndices, GL_STATIC_DRAW);

	// now, the gpu knows how to process the data but opengl doesn't know how to interpret the vertex data in memory (we know it as three vec3 coordinates)
	// let's configure opengl to correctly interpret the vertex data

	// how the vertices data is formatted:
	
	// vertex 1 // vertex 2 // vertex 3 //
	// stride 12 bits (4 bytes per component, 3 components)
	// offset 0 (there's no extra data that is shoved in at the start that needs to be skipped)

	// the function for configurating the way vertex data is interpreted is glVertexAttribPointer
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	// the first param is the vertex attribute we want to configure - in the shader source code, "layout (location = 0)"
	// this sets the location of the vertex attribute to 0 and since we want to pass data to this vertex attribute, we pass in 0
	// the second is the size of the vertex attribute - vertices contains vec3 position data, therefore size is 3
	// third argument specifies type of data - a vec* in glsl consists of floating point values, therefore GL_FLOAT
	// the fourth argument specifies if the data should be normalised. no, so GL_FALSE
	// the fifth is the stride, which tells us the difference between vertex attributes - 4 bytes per component, 3 components therefore stride is 12 bytes
	// the last parameter is the offset starting position. since data sharts in the very first location, this should be 0 (cast to generic void*). this has more use for more advanced concepts later

	// so now we've said how the vertex data should be interpreted, we can also enable the vertex attribute by giving glEnableVertexAttribArray the vertex attrubute location as it's arguement
	glEnableVertexAttribArray(0);

	
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);
	

	// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
	// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
	glBindVertexArray(0);

	// and the drawing code in the render loop


	// let's create a texture - we use an id a lot like buffers and arrays
	unsigned int furnace1Texture;
	glGenTextures(1, &furnace1Texture);

	// now bind the texture so subsequent texture commands are directed at this texture
	glBindTexture(GL_TEXTURE_2D, furnace1Texture);

	// when texture coordinates are specified outside of the range, we can use some options to specify how opengl should behave
	
	/*
	GL_REPEAT: The default behavior for textures.Repeats the texture image.
	GL_MIRRORED_REPEAT : Same as GL_REPEAT but mirrors the image with each repeat. // (probably looks the best because there won't be any hard line)
	GL_CLAMP_TO_EDGE : Clamps the coordinates between 0 and 1. The result is that higher coordinates become clamped to the edge, resulting in a stretched edge pattern.
	GL_CLAMP_TO_BORDER : Coordinates outside the range are now given a user - specified border color.
	*/

	// Each of the aforementioned options can be set per coordinate axis
	// (s, t (and r if you're using 3D textures) equivalent to x,y,z) with the glTexParameter* function:

	// set the options for 2d textures (first param) // we do 2 function calls for each coordinate of the texture (second parameter), and set the actual option (third parameter)
	// we want to configure this for the s and  t axis
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);

	// if we want clamp to border, then we should specify the border colour
	// float borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };
	// glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);

	// texture filtering

	// open gl needs to know which texture pixel to map the coordinate to - usually this is either a linear (a linear mixture of floats of surrounding pixels)
	// or the closest texel to the texture coordinate (default)
	// GL_NEAREST and GL_LINEAR are the two most important options
	// GL_NEAREST makes individual pixels stand out more because of harsher contrasts with surrounding pixels
	// GL_LINEAR is pretty much the opposite

	// texture filtering can be set for magnifying and minifying operations
	// this means you could use nearest neighbour for minimising operations and linear filtering for upscale textures
	// we specify the options for each coordinate with the glTexParameter* function
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	// in a large room with thousand of objects, some very far away, there are going to be objects whose fragment covers a large part of the texture
	// for linear filtering there's going to be a lot of surplus bandwidth and processing for finding the average float value for a very small object
	// however, we can use mipmaps which is a collection of textures with smaller and smaller resolutions that are used for fragments at further and further distances from the camera
	// making mipmaps are cumbersome, but we can use opengl to simplify the process by letting it do it for us!!!

	// we can also filter between mipmap levels to prevent sharp edges when switching between mipmap levels
	/*
    GL_NEAREST_MIPMAP_NEAREST: takes the nearest mipmap to match the pixel size and uses nearest neighbor interpolation for texture sampling.
    GL_LINEAR_MIPMAP_NEAREST: takes the nearest mipmap level and samples that level using linear interpolation.
    GL_NEAREST_MIPMAP_LINEAR: linearly interpolates between the two mipmaps that most closely match the size of a pixel and samples the interpolated level via nearest neighbor interpolation.
    GL_LINEAR_MIPMAP_LINEAR: linearly interpolates between the two closest mipmaps and samples the interpolated level via linear interpolation.
	*/

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	// A common mistake is to set one of the mipmap filtering options as the magnification filter.This doesn't have any effect since mipmaps are primarily used for when textures get downscaled

	// flips the image vertically before loading because the texture is going to be loaded in upside down otherwise
	stbi_set_flip_vertically_on_load(true);

	// now, load in the texture!
	// let#s use an image loading library
	int furnace1TextureWidth, furnace1TextureHeight, furnace1TextureNrChannels;
	unsigned char* data = stbi_load("furnace1.png", &furnace1TextureWidth, &furnace1TextureHeight, &furnace1TextureNrChannels, 0);


	if (data)
	{
		// the data has been loaded in correctly!
		// we can now generate the texture using the image data
		// this is done using glTexImage2D
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, furnace1TextureWidth, furnace1TextureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		// 1. the sort of texture that we're targeting
		// 2. the mipmap texture level we want to create the texture for (if you want to generate mipmaps manually) - base is 0
		// 3. what sort of format we want to store the data in (we're storing in RGB form)
		// 4. width of the image (given to us by the loading library)
		// 5. height of the image
		// 6. legacy arg that should always be 0
		// 7. the format of the source image (RGB)
		// 8. the datatype of the source image (unsigned byte)
		// 9. finally, the actual image data
		// great!

		// now, automatically generate the mipmap of the targeted texture (specifically a 2d texture so any other texture type will not be targeted)
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}

	// now free the image data
	stbi_image_free(data);


	unsigned int furnace2Texture;
	glGenTextures(1, &furnace2Texture);

	// now bind the texture so subsequent texture commands are directed at this texture
	glBindTexture(GL_TEXTURE_2D, furnace2Texture);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	// now, load in the texture!
	// let#s use an image loading library
	int furnace2TextureWidth, furnace2TextureHeight, furnace2TextureNrChannels;
	data = stbi_load("furnace2.png", &furnace2TextureWidth, &furnace2TextureHeight, &furnace2TextureNrChannels, 0);


	if (data)
	{
		// the data has been loaded in correctly!
		// we can now generate the texture using the image data
		// this is done using glTexImage2D
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, furnace2TextureWidth, furnace2TextureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		// 1. the sort of texture that we're targeting
		// 2. the mipmap texture level we want to create the texture for (if you want to generate mipmaps manually) - base is 0
		// 3. what sort of format we want to store the data in (we're storing in RGB form)
		// 4. width of the image (given to us by the loading library)
		// 5. height of the image
		// 6. legacy arg that should always be 0
		// 7. the format of the source image (RGB)
		// 8. the datatype of the source image (unsigned byte)
		// 9. finally, the actual image data
		// great!

		// now, automatically generate the mipmap of the targeted texture (specifically a 2d texture so any other texture type will not be targeted)
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}

	// now free the image data
	stbi_image_free(data);


	// add the textures to the respective texture units in the shader
	furnaceTextureShader.UseShader();
	furnaceTextureShader.SetIntUniform("texture1", 0);
	furnaceTextureShader.SetIntUniform("texture2", 1);

	///////////////////////////////
	//      the render loop      //
	///////////////////////////////

	// draw in polygon/wireframe mode
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);

	float lastTime = 0;

	// glfwWindowShouldClose polls if glfw has been instructed to close
	while (!glfwWindowShouldClose(window)) {

		float newTime = glfwGetTime();
		deltaTime = newTime - lastTime;
		lastTime = newTime;

		// call to ProcessInput, exits on esc key press
		ProcessInput(window);

		// rendering commands here
		// 
		// At the start of frame we want to clear the screen.
		// We can clear the screen's color buffer using glClear where we pass in buffer bits to specify which buffer we would like to clear.
		// The possible bits we can set are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT

		// the glClearColor function is a state-setting function and glClear is a state-using function in that it uses the current state to retrieve the clearing color from. 
		glClearColor(0.2, 0.3, 0.3, 1.0);
		glClear(GL_COLOR_BUFFER_BIT);




		/*
		glBindVertexArray(VAO);
		// insert call to function that draws the triangle here!
		//glDrawArrays(GL_TRIANGLES, 0, 6);
		// second argument is the number of items in the elements list (3 vertices * 2 trangles)
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		//glDrawArrays(GL_TRIANGLES, 0, 3);
		*/

		/*
		glUseProgram(shaderProgram2);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		*/

		//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

		/*
		shader2.UseShader();

		glBindVertexArray(VAO2);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
		*/


		// now bind the texture to assign the texture to the fragment shader sampler automatically
		//glBindTexture(GL_TEXTURE_2D, furnace1Texture);

		furnaceTextureShader.UseShader();

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, furnace1Texture);
		glActiveTexture(GL_TEXTURE1);
		glBindTexture(GL_TEXTURE_2D, furnace2Texture);

		//furnaceTextureShader.SetFloatUniform("heatLevel", sin(glfwGetTime()) / 2.0f + 0.5f);
		furnaceTextureShader.SetFloatUniform("heatLevel", mixAmount);

		// create a matrix which rotates vertices by 90 degrees and scales downward
		glm::mat4 rotationTransformation = glm::mat4(1.0f);
		rotationTransformation = glm::translate(rotationTransformation, glm::vec3(0.25, 0.25, 0.0f));
		rotationTransformation = glm::rotate(rotationTransformation, (float)rotation, glm::vec3(0.0, 0.0, 1.0));

		unsigned int matrixUniformLocation = glGetUniformLocation(furnaceTextureShader.shaderProgramID, "transform");
		glUniformMatrix4fv(matrixUniformLocation, 1, GL_FALSE, glm::value_ptr(rotationTransformation));

		glBindVertexArray(VAO);
		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);


		

		// create a matrix which rotates vertices by 90 degrees and scales downward
		rotationTransformation = glm::mat4(1.0f);
		rotationTransformation = glm::translate(rotationTransformation, glm::vec3(-0.25, -0.25, 0.0f));
		float sintime = abs(sinf(glfwGetTime()));
		rotationTransformation = glm::scale(rotationTransformation, glm::vec3(sintime, sintime, sintime));

		glUniformMatrix4fv(matrixUniformLocation, 1, GL_FALSE, glm::value_ptr(rotationTransformation));

		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		// checks if events are triggered like input or resizes, updates the window state,
		// and calls the corresponding functions which we can register as callbacks
		glfwPollEvents();

		// swaps the colour buffer that is displayed to the screen (replaces the previously displayed front buffer with the previously written to back buffer)
		glfwSwapBuffers(window);

	}

	// optional: de-allocate all resources once they've outlived their purpose:
	// ------------------------------------------------------------------------
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &EBO);

	furnaceTextureShader.DeleteShaderProgram();

	// As soon as we exit the render loop we would like to properly clean / delete all of GLFW's resources that were allocated.
	glfwTerminate();

	return 0;
}